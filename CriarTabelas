CREATE TABLE administrador (
	id	 serial,
	email	 VARCHAR(512) UNIQUE NOT NULL,
	password VARCHAR(512) NOT NULL,
	nome	 VARCHAR(512) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE album (
	id	 serial,
	nome	 VARCHAR(512) NOT NULL,
	duracao VARCHAR(512) NOT NULL,
	ano	 INTEGER,
	stock	 INTEGER,
	preco	 FLOAT(8),
	PRIMARY KEY(id)
);

CREATE TABLE artista (
	id	 serial,
	artista VARCHAR(512) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE cliente (
	id		 serial,
	nome		 VARCHAR(512) NOT NULL,
	password	 VARCHAR(512) NOT NULL,
	email		 VARCHAR(512) UNIQUE NOT NULL,
	data_nascimento VARCHAR(512),
	saldo		 FLOAT(8),
	PRIMARY KEY(id)
);

CREATE TABLE notificacao (
	id		 serial,
	mensagem	 VARCHAR(512),
	data		 TIMESTAMP NOT NULL,
	administrador_id INTEGER NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE pedido (
	cliente_id INTEGER,
	album_id	 serial,
	PRIMARY KEY(cliente_id,album_id)
);

CREATE TABLE historico_c (
	id		 serial,
	data_de_compra TIMESTAMP NOT NULL,
	cliente_id	 INTEGER NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE musica (
	id	 serial,
	musica VARCHAR(512) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE genero (
	id		serial,
	tipo_genero VARCHAR(512) NOT NULL,
	PRIMARY KEY(id)
);

CREATE TABLE historico_a (
	preco		 FLOAT(8),
	data		 TIMESTAMP,
	administrador_id INTEGER NOT NULL,
	album_id	 INTEGER NOT NULL
);

CREATE TABLE c_entrada (
	mensagem_lida	 BOOL,
	notificacao_id INTEGER,
	cliente_id	 INTEGER,
	PRIMARY KEY(notificacao_id,cliente_id)
);

CREATE TABLE historico_c_album (
	historico_c_id INTEGER,
	album_id	 INTEGER,
	PRIMARY KEY(historico_c_id,album_id)
);

CREATE TABLE administrador_album (
	administrador_id INTEGER,
	album_id	 INTEGER,
	PRIMARY KEY(administrador_id,album_id)
);

CREATE TABLE artista_album (
	artista_id INTEGER,
	album_id	 INTEGER,
	PRIMARY KEY(artista_id,album_id)
);

CREATE TABLE musica_album (
	musica_id INTEGER,
	album_id	 INTEGER,
	PRIMARY KEY(musica_id,album_id)
);

CREATE TABLE album_genero (
	album_id	 INTEGER,
	genero_id INTEGER,
	PRIMARY KEY(album_id,genero_id)
);

ALTER TABLE notificacao ADD CONSTRAINT notificacao_fk1 FOREIGN KEY (administrador_id) REFERENCES administrador(id);
ALTER TABLE pedido ADD CONSTRAINT pedido_fk1 FOREIGN KEY (cliente_id) REFERENCES cliente(id);
ALTER TABLE pedido ADD CONSTRAINT pedido_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE historico_c ADD CONSTRAINT historico_c_fk1 FOREIGN KEY (cliente_id) REFERENCES cliente(id);
ALTER TABLE historico_a ADD CONSTRAINT historico_a_fk1 FOREIGN KEY (administrador_id) REFERENCES administrador(id);
ALTER TABLE historico_a ADD CONSTRAINT historico_a_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE c_entrada ADD CONSTRAINT c_entrada_fk1 FOREIGN KEY (notificacao_id) REFERENCES notificacao(id);
ALTER TABLE c_entrada ADD CONSTRAINT c_entrada_fk2 FOREIGN KEY (cliente_id) REFERENCES cliente(id);
ALTER TABLE historico_c_album ADD CONSTRAINT historico_c_album_fk1 FOREIGN KEY (historico_c_id) REFERENCES historico_c(id);
ALTER TABLE historico_c_album ADD CONSTRAINT historico_c_album_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE administrador_album ADD CONSTRAINT administrador_album_fk1 FOREIGN KEY (administrador_id) REFERENCES administrador(id);
ALTER TABLE administrador_album ADD CONSTRAINT administrador_album_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE artista_album ADD CONSTRAINT artista_album_fk1 FOREIGN KEY (artista_id) REFERENCES artista(id);
ALTER TABLE artista_album ADD CONSTRAINT artista_album_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE musica_album ADD CONSTRAINT musica_album_fk1 FOREIGN KEY (musica_id) REFERENCES musica(id);
ALTER TABLE musica_album ADD CONSTRAINT musica_album_fk2 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE album_genero ADD CONSTRAINT album_genero_fk1 FOREIGN KEY (album_id) REFERENCES album(id);
ALTER TABLE album_genero ADD CONSTRAINT album_genero_fk2 FOREIGN KEY (genero_id) REFERENCES genero(id);

